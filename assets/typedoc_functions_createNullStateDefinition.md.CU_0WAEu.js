import{_ as a,c as e,o as n,V as t}from"./chunks/framework.BqX6ZQZG.js";const S=JSON.parse('{"title":"Function: createNullStateDefinition()","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/functions/createNullStateDefinition.md","filePath":"typedoc/functions/createNullStateDefinition.md"}'),s={name:"typedoc/functions/createNullStateDefinition.md"},i=t(`<p><a href="./../">@minifsm/core</a> / createNullStateDefinition</p><h1 id="function-createnullstatedefinition" tabindex="-1">Function: createNullStateDefinition() <a class="header-anchor" href="#function-createnullstatedefinition" aria-label="Permalink to &quot;Function: createNullStateDefinition()&quot;">​</a></h1><blockquote><p><strong>createNullStateDefinition</strong>&lt;<code>FSMState</code>, <code>FSMContext</code>, <code>FSMInput</code>&gt;(<code>state</code>): <a href="./../interfaces/FSMStateDefinition.html"><code>FSMStateDefinition</code></a>&lt;<code>FSMState</code>, <code>FSMContext</code>, <code>FSMInput</code>&gt;</p></blockquote><p>Creates a null state definition with no transitions, only a default null transition. Null state definitions represent states with no outgoing transitions. They are useful for defining terminal states or states with default behavior that always leads to the same next state. Null state definitions simplify FSM construction by providing a default transition for states without explicit transitions.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>// npm run snippet:create-null-state-definition</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &#39;module-alias/register&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { createNullStateDefinition } from &#39;@minifsm/core&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Define types for state, context, and input</span></span>
<span class="line"><span>type MyState = &#39;STATE_A&#39; | &#39;STATE_B&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>interface MyContext {</span></span>
<span class="line"><span>  data: string</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>interface MyInput {</span></span>
<span class="line"><span>  action: string</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Create a null state definition for STATE_A</span></span>
<span class="line"><span>const nullStateDefinitionA = createNullStateDefinition&lt;MyState, MyContext, MyInput&gt;(&#39;STATE_A&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Create a null state definition for STATE_B</span></span>
<span class="line"><span>const nullStateDefinitionB = createNullStateDefinition&lt;MyState, MyContext, MyInput&gt;(&#39;STATE_B&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Log the null state definitions</span></span>
<span class="line"><span>console.log(&#39;Null State Definition for STATE_A:&#39;, nullStateDefinitionA)</span></span>
<span class="line"><span>console.log(&#39;Null State Definition for STATE_B:&#39;, nullStateDefinitionB)</span></span></code></pre></div><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><p>• <strong>FSMState</strong> extends <code>string</code></p><p>• <strong>FSMContext</strong></p><p>• <strong>FSMInput</strong></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>state</strong>: <code>FSMState</code></p><p>The state label.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../interfaces/FSMStateDefinition.html"><code>FSMStateDefinition</code></a>&lt;<code>FSMState</code>, <code>FSMContext</code>, <code>FSMInput</code>&gt;</p><p>A null state definition.</p><h2 id="typeparam" tabindex="-1">Typeparam <a class="header-anchor" href="#typeparam" aria-label="Permalink to &quot;Typeparam&quot;">​</a></h2><p>FSMState - Type of the FSM state.</p><h2 id="typeparam-1" tabindex="-1">Typeparam <a class="header-anchor" href="#typeparam-1" aria-label="Permalink to &quot;Typeparam&quot;">​</a></h2><p>FSMContext - Type of the FSM context.</p><h2 id="typeparam-2" tabindex="-1">Typeparam <a class="header-anchor" href="#typeparam-2" aria-label="Permalink to &quot;Typeparam&quot;">​</a></h2><p>FSMInput - Type of the FSM input.</p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/romain-bourjot/minifsm/blob/bbcb6a4/src/index.ts#L267" target="_blank" rel="noreferrer">index.ts:267</a></p>`,24),p=[i];function o(l,r,c,d,u,f){return n(),e("div",null,p)}const m=a(s,[["render",o]]);export{S as __pageData,m as default};
